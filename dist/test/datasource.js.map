{"version":3,"sources":["../../src/datasource.js"],"names":["TeamCityDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","jsonData","useAccessToken","accessToken","basicAuth","length","targetTypes","fields","build","getBuildTypes","then","status","message","title","target","query","indexOf","Promise","reject","types","filter","id","map","text","value","options","promises","targets","queryOneTarget","all","data","concat","apply","results","queryOptions","field","getBuilds","buildType","count","maxDataPoints","from","range","to","mapResult","builds","items","datapoints","item","date","sort","a","b","request","encodeURIComponent","format","escapeBuildTypeId","parseInt","doRequest","method","result","number","statusText","finishDate","unix","projectName","projectId","datasourceRequest","replace"],"mappings":"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","file":"datasource.js","sourcesContent":["import moment from 'moment'\r\n\r\nexport class TeamCityDatasource {\r\n\r\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n        this.type = instanceSettings.type;\r\n        this.url = instanceSettings.url;\r\n        this.name = instanceSettings.name;\r\n        this.q = $q;\r\n        this.backendSrv = backendSrv;\r\n        this.templateSrv = templateSrv;\r\n        this.withCredentials = instanceSettings.withCredentials;\r\n        this.headers = {'Content-Type': 'application/json'};\r\n\r\n        if (instanceSettings.jsonData.useAccessToken) {\r\n            this.headers['Authorization'] = \"Bearer \" + instanceSettings.jsonData.accessToken;\r\n        } else if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\r\n            this.headers['Authorization'] = instanceSettings.basicAuth;\r\n        }\r\n\r\n        this.targetTypes = [ 'build' ]\r\n        this.fields = {\r\n            build: [ 'status', 'statusText', 'number', 'name', 'projectName' ]\r\n        }\r\n      }\r\n\r\n    testDatasource() {\r\n        return this.getBuildTypes()\r\n            .then(() => ({ status: 'success', message: 'Data source is working', title: 'Success' }))\r\n    }\r\n\r\n    metricFindQuery(target, query) {\r\n        if (this.targetTypes.indexOf(target.type) == -1) {\r\n            return Promise.reject({ status: 'error', message: `metricFindQuery: Unknown target type ${target.type}` })\r\n        }\r\n        if (target.type == 'build') {\r\n            return this.getBuildTypes().then(types =>\r\n                types\r\n                    .filter(type => type.id.indexOf(query) != -1)\r\n                    .map(type => ({ text: type.id, value: type.id }))\r\n            )\r\n        }\r\n        return Promise.reject({ status: 'error', message: `metricFindQuery: Unexpected state` })\r\n    }\r\n\r\n    query(options) {\r\n        var promises = options.targets\r\n            .map(target => this.queryOneTarget(options, target))\r\n        \r\n        return Promise.all(promises).then(results => ({ data: [].concat.apply([], results) }))\r\n    }\r\n\r\n    async queryOneTarget(queryOptions, target) {\r\n        if (this.targetTypes.indexOf(target.type) == -1) {\r\n            return Promise.reject({ status: 'error', message: `queryOneTarget: Unknown target type ${target.type}` })\r\n        }\r\n        if (this.fields[target.type].indexOf(target.field) == -1) {\r\n            return Promise.reject({ status: 'error', message: `queryOneTarget: Unknown field ${target.field}` })\r\n        }\r\n        if (target.type == 'build') {\r\n            return this.getBuilds({\r\n                buildType: target.target,\r\n                count: queryOptions.maxDataPoints,\r\n                from: queryOptions.range.from,\r\n                to: queryOptions.range.to\r\n            }).then(builds => this.mapResult(target, builds))\r\n        }\r\n        return Promise.reject({ status: 'error', message: `queryOneTarget: Unexpected state` })\r\n    }\r\n\r\n    mapResult(target, items) {\r\n        return { \r\n            target: target.target,\r\n            datapoints: items.map(item => [item[target.field], item.date])\r\n                              .sort((a, b) => a[1] > b[1])\r\n        }\r\n    }\r\n\r\n    getBuilds(request) {\r\n        var from = encodeURIComponent(moment(request.from).format(\"YYYYMMDDTHHmmssZ\"))\r\n        var to = encodeURIComponent(moment(request.to).format(\"YYYYMMDDTHHmmssZ\"))\r\n        var url = `${this.url}/httpAuth/app/rest/builds?`\r\n            + `locator=buildType:(${escapeBuildTypeId(request.buildType)}),count:${parseInt(request.count)},`\r\n            + `finishDate:(date:${from},condition:after),finishDate:(date:${to},condition:before)&`\r\n            + 'fields=build(number,status,statusText,finishDate,buildType(name,projectName))'\r\n        return this.doRequest({\r\n            url: url,\r\n            method: 'GET'\r\n        }).then(result => {\r\n            return result.data.build.map(build => ({\r\n                number: build.number,\r\n                status: build.status == 'SUCCESS' ? 100 : 0,\r\n                statusText: build.statusText,\r\n                date: moment(build.finishDate, 'YYYYMMDDTHHmmssZ').unix() * 1000,\r\n                name: build.buildType.name,\r\n                projectName: build.buildType.projectName\r\n            }))\r\n        })\r\n    }\r\n\r\n    getBuildTypes() {\r\n        var url = `${this.url}/httpAuth/app/rest/buildTypes?fields=buildType(id,name,projectName,projectId)`\r\n        return this.doRequest({\r\n            url: url,\r\n            method: 'GET'\r\n        }).then(result => {\r\n            return result.data.buildType.map(type => ({\r\n                id: type.id,\r\n                name: type.name,\r\n                projectId: type.projectId,\r\n                projectName: type.projectName\r\n            }))\r\n        })\r\n    }\r\n\r\n    doRequest(options) {\r\n        options.withCredentials = this.withCredentials;\r\n        options.headers = this.headers;\r\n    \r\n        return this.backendSrv.datasourceRequest(options)\r\n      }\r\n\r\n}\r\n\r\nfunction escapeBuildTypeId(id) {\r\n    return id.replace(/[^a-zA-Z0-9_]+/g,'_')\r\n}"]}